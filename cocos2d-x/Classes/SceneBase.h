#ifndef __BASE_SCENE_H__
#define __BASE_SCENE_H__

#include "cocos2d.h"
#include <ui/CocosGUI.h>
#include <AK/SoundEngine/Common/AkTypes.h>
#include <AK/SoundEngine/Common/AkSoundEngine.h>	    // Sound engine
#include <../../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h>  // IDs generated by Wwise
#include <string>
using std::string;

typedef std::function<void(cocos2d::Event* event)> onCallback;


#define INTEGRATIONDEMO_MAX_MESSAGE 1024
/////////////////////////
//  GLOBAL CONSTANTS
/////////////////////////
static const AkUInt16 DESIRED_WIDTH = 640;
static const AkUInt16 DESIRED_HEIGHT = 480;
static const AkUInt16 DESIRED_FPS = 60;
static const AkReal32 MS_PER_FRAME = (1000 / (AkReal32)DESIRED_FPS);

typedef void(*FUNC_CALLBACK)(cocos2d::EventKeyboard::KeyCode, cocos2d::Event*);
typedef cocos2d::Scene * (*FUNC_MAIN_SCENE)();

#ifdef AK_ANDROID
#define  LOGAK(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#else
void LOGAK(char *format, ...);
//void LOGAKW(TCHAR *format, ...);
#endif

/////////////////////////
//  SceneBase
/////////////////////////
class SceneBase : public cocos2d::Layer
{
public:
    SceneBase(string strTitle, string strHelp=NULL, FUNC_MAIN_SCENE pfnc = NULL,  int iFrameRate = DESIRED_FPS, int iWidth= 0/*DESIRED_WIDTH*/, int iHeight= 0/*DESIRED_HEIGHT*/)
    {
	m_szPageTitle = strTitle;
	m_szHelp = strHelp;
	m_funcMainScene = pfnc;
	m_iFrameRate = iFrameRate;
	if (iWidth == 0 && iHeight == 0) {
	    cocos2d::Size windowSize = cocos2d::Director::getInstance()->getWinSize();
	    m_iMenuWidth = windowSize.width;
	    m_iMenuHeight = windowSize.height;
	}else{
	    m_iMenuWidth = iWidth;
	    m_iMenuHeight = iHeight;
	}
	m_key_listener = NULL;
	m_pParentMenu = this;
	m_iTickCount = 0;
	m_menuix = 0;
    }
    ~SceneBase()
    {
	if (m_key_listener) this->getEventDispatcher()->removeEventListener(m_key_listener);
	m_key_listener = NULL;
    }

    virtual bool init();
    virtual void update(float dt);
    virtual void onKeyPressed(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* unused_event);
    virtual void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* unused_event);
    virtual void onRelease();

    void onNotImplemented(cocos2d::Ref* pSender);

    static cocos2d::Scene* NotImplemented();


    void addItem(cocos2d::MenuItem* item, const float posx, const float posy, SceneBase* pScence);
    cocos2d::Label*	    addLabel(const std::string text, const float posx, const float posy, const int size, SceneBase* pScence,
	const cocos2d::Vec2 point = cocos2d::Vec2::ANCHOR_BOTTOM_LEFT);
    cocos2d::MenuItemLabel* addLabelEx(const std::string text, const float posx, const float posy, const int size, SceneBase* pScence,
	const cocos2d::Vec2 point = cocos2d::Vec2::ANCHOR_BOTTOM_LEFT);
    cocos2d::MenuItemLabel* addLabelEx(const std::string text, const float posx, const float posy, const int size, SceneBase* pScence, const cocos2d::ccMenuCallback& callback,
	const cocos2d::TextHAlignment hAlignment = cocos2d::TextHAlignment::LEFT, const cocos2d::Vec2 point = cocos2d::Vec2::ANCHOR_BOTTOM_LEFT);

    void setMenuColor(int index);

    // a selector callback
    void menuCloseCallback(cocos2d::Ref* pSender);

    // implement the "static create()" method manually
    //CREATE_FUNC(BaseScene);

    //FUNC_CALLBACK m_keypressedCallback;
    cocos2d::EventListenerKeyboard*	m_key_listener;

    /// Index of the currently selected control.
    int m_iSelectedIndex;

    /// The page's title text.
    string m_szPageTitle;


    /// String of text to display when the user asks for help.
    /// \note This string can be modified to provide custom help for your page.
    string m_szHelp;

    /// Pointer to the Menu object which contains the page.
    SceneBase* m_pParentMenu;

    /// Error message of the previous error that occurred.
    static string m_szError;

    static void SetLoadFileErrorMessage(const char* fileName);

    static void SetErrorMessage(const char* in_szError)
    {
	m_szError = in_szError;
        cocos2d::MessageBox(in_szError, "An Error Occurred");
    }
    int GetFrameRate() const
    {
	return m_iFrameRate;
    }

    int GetHeight() const
    {
	return m_iMenuHeight;
    }

    int GetTickCount() const
    {
	return m_iTickCount;
    }

    int GetWidth() const
    {
	return m_iMenuWidth;
    }

    /// Height of the menu screen.
    int m_iMenuHeight;

    /// Width of the menu screen.
    int m_iMenuWidth;

    /// Number of ticks (ie- calls to update) since the Menu was started.
    int m_iTickCount;

    /// The framerate (frames per second) that the Menu system has been set to run on.
    int m_iFrameRate;

    FUNC_MAIN_SCENE m_funcMainScene;
    int	m_menuix;
    static int m_lastMenuIx;
    std::vector<cocos2d::MenuItemLabel*> m_menu;
    std::vector<FUNC_MAIN_SCENE> m_funcEnt;
};

#endif // __MAIN_SCENE_H__
