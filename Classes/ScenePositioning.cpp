#include "ScenePositioning.h"
#include "SceneMain.h"
#include <AK/SoundEngine/Common/AkSoundEngine.h>		// Sound engine
#include "../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h"	// IDs generated by Wwise
#include "WwiseWrapper.h"
#include "Helpers.h"
#include <string>
#include "Platform.h"
#include "PlatformCocos.h"

#define  LOG_TAG    __FILE__

//Our game object ID.  Completely arbitrary.
#define BUFFER_ZONE 30
#define GAME_OBJECT_POSTEST 100

USING_NS_CC;

ScenePositioning::ScenePositioning()
: SceneBase("Positioning Demo",
	"This demo shows how to do 3D positioning in "
	"Wwise. A helicopter sound starts playing as soon "
	"as you enter the page. Move the 'o' around "
	"in X and Z, i.e., the plane of the screen, using the "
	"following keys: <<UG_RIGHT_STICK>> <<DIRECTIONAL_TYPE>>,"
	"and hear the sound move along with it. "
	"Coordinates are displayed at the bottom-left of the screen."
	,SceneMain::createScene)
, m_labelPos(NULL)
, m_fGameObjectX(0)
, m_fGameObjectZ(0)
, m_fWidth(0.0f)
, m_fHeight(0.0f)
{
    m_LastX = m_LastY = 0;
    m_bIsTouch = m_bPressedMouse = m_bPressed = false;
    m_key = EventKeyboard::KeyCode::KEY_NONE;
}

ScenePositioning::~ScenePositioning()
{
    auto dispatcher = Director::getInstance()->getEventDispatcher();
    dispatcher->removeEventListener(m_touchListener);
    dispatcher->removeEventListener(m_mouseListener);
}

void ScenePositioning::onRelease()
{
    m_labelPos = NULL;
    m_bPressedMouse = NULL;

    AK::SoundEngine::StopAll();
    AK::SoundEngine::UnregisterGameObj(GAME_OBJECT_POSTEST);
    AK::SoundEngine::UnloadBank("Positioning_Demo.bnk", NULL);
    m_lastMenuIx = 7;
}

Scene* ScenePositioning::createScene()
{
    // 'scene' is an autorelease object
    auto scene = Scene::create();
    // 'layer' is an autorelease object
    auto layer = ScenePositioning::create();
    // add layer as a child to scene
    scene->addChild(layer);
    // return the scene
    return scene;
}

// on "init" you need to initialize your instance
bool ScenePositioning::init()
{
    //////////////////////////////
    // 1. super init first
    if (!SceneBase::init())
    {
	return false;
    }

    cocos2d::Size windowSize = Director::getInstance()->getWinSize();

    m_fWidth  = (float)windowSize.width;
    m_fHeight = (float)windowSize.height;
    int iHalfWidth  = m_pParentMenu->GetWidth()	* 0.5;
    int iHalfHeight = m_pParentMenu->GetHeight()* 0.5;
    m_LastX = iHalfWidth;
    m_LastY = iHalfHeight;

    char strBuf[50];

    /////////////////////////////
    // 2. add a menu item with "X" image, which is clicked to quit the program
    //    you may modify it.
    {
	snprintf(strBuf, 50, "X: %.2f\nZ: %.2f", m_fGameObjectX, m_fGameObjectZ);
	m_labelPos = addLabel(strBuf, 0, 0, FONT_SIZE_MENU, this);
	int iTextWidth = m_labelPos->getContentSize().width; // 40;//label->getWidth(); //dm.width;
	int iTextHeight = m_labelPos->getContentSize().height; //40;//label->getHeight(); //dm.height;
#if defined(AK_ANDROID) || defined(AK_IOS)
        //m_labelPos->setPosition(cocos2d::Point(iHalfWidth + 50, /*iHalfHeight +*/ 130));
	m_labelPos->setPosition(cocos2d::Point(iHalfWidth + 50, iTextHeight));
#else
	m_labelPos->setPosition(cocos2d::Point(m_pParentMenu->GetWidth() - BUFFER_ZONE - iTextWidth, m_pParentMenu->GetHeight() - BUFFER_ZONE - iTextHeight));
#endif
	// moving object image
	m_sprite = CCSprite::create("human.png");
	m_sprite->setPosition(ccp(iHalfWidth, iHalfHeight));
	m_sprite->setScale(1.5f);
	this->addChild(m_sprite, 1);
    }

    // Mouse event
    m_mouseListener = EventListenerMouse::create();
    m_mouseListener->onMouseMove = CC_CALLBACK_1(ScenePositioning::onMouseMove, this);
    m_mouseListener->onMouseDown = CC_CALLBACK_1(ScenePositioning::onMouseDown, this);
    m_mouseListener->onMouseUp = CC_CALLBACK_1(ScenePositioning::onMouseUp, this);
    _eventDispatcher->addEventListenerWithSceneGraphPriority(m_mouseListener, this);

    // Touch event
#if defined(AK_ANDROID) || defined(AK_APPLE)
    m_touchListener = EventListenerTouchOneByOne::create();
    //m_touchListener->setSwallowTouches(true);
    m_touchListener->onTouchBegan = CC_CALLBACK_2(ScenePositioning::onTouchBegan, this);
    m_touchListener->onTouchMoved = CC_CALLBACK_2(ScenePositioning::onTouchMoved, this);
    m_touchListener->onTouchEnded = CC_CALLBACK_2(ScenePositioning::onTouchEnded, this);
    //m_touchListener->onTouchCancelled = CC_CALLBACK_2(ScenePositioning::onTouchCancelled, this);
    _eventDispatcher->addEventListenerWithSceneGraphPriority(m_touchListener, this);
#endif

    // Register the "Human" game object
    AKRESULT hr = AK::SoundEngine::RegisterGameObj(GAME_OBJECT_POSTEST, "Positioning Demo");
    LOGAK("RegisterGameObj=0x%x", hr);

    // Load the sound bank
    AkBankID bankID; // Not used
    if ((hr=AK::SoundEngine::LoadBank("Positioning_Demo.bnk", AK_DEFAULT_POOL_ID, bankID)) != AK_Success)
    {
	LOGAK("Positioning_Demo.bnk load error hr=0x%x", hr);
	SetLoadFileErrorMessage("Positioning_Demo.bnk");
	return false;
    }

    AkPlayingID id = AK::SoundEngine::PostEvent("Play_Positioning_Demo", GAME_OBJECT_POSTEST);
    LOGAK("PostEvent=%d", id);

    scheduleUpdate();

    return true;
}

void ScenePositioning::update(float dt)
{
    
    if (m_bPressed) {
        switch (m_key) {
        case EventKeyboard::KeyCode::KEY_LEFT_ARROW:
        case EventKeyboard::KeyCode::KEY_RIGHT_ARROW:
        case EventKeyboard::KeyCode::KEY_UP_ARROW:
        case EventKeyboard::KeyCode::KEY_DOWN_ARROW:
            onKeyPressed(m_key, NULL);
            break;
        }
    }
    
    SceneBase::update(dt);
}

void ScenePositioning::onMouseDown(Event *event)
{
    EventMouse* e = (EventMouse*)event;
    if (e->getMouseButton() == EventMouse::MouseButton::BUTTON_LEFT) {
	bool bRet = false;
	CCPoint pt(e->getCursorX(), e->getCursorY());
	CCRect  rc = m_sprite->boundingBox();
	if (rc.containsPoint(pt)) {
	    bRet = true;
	    m_bPressedMouse = true;
	    UpdateGameObjPos(e->getCursorX(), e->getCursorY());
	}
#if defined(NDK_DEBUG) || defined(AK_DEBUG)
	char strBuf[50];
	snprintf(strBuf, 50, "<onMouseDown> %d %d (%g, %g)\n", bRet, e->getMouseButton(), e->getCursorX(), e->getCursorY());
	LOGAK(strBuf);
#endif
    }
}

void ScenePositioning::onMouseMove(Event *event)
{
    EventMouse* e = (EventMouse*)event;
    if (m_bPressedMouse)
	UpdateGameObjPos(e->getCursorX(), e->getCursorY());
}

void ScenePositioning::onMouseUp(Event *event)
{
    m_bPressedMouse = false;

#if defined(NDK_DEBUG) || defined(AK_DEBUG)
    EventMouse* e = (EventMouse*)event;
    char strBuf[50];
    snprintf(strBuf, 50, "<onMouseUp> %d (%g, %g)\n", e->getMouseButton(), e->getCursorX(), e->getCursorY());
//    OutputDebugStringA(strBuf);
    LOGAK(strBuf);
#endif
}

bool ScenePositioning::onTouchBegan(cocos2d::Touch *touch, cocos2d::Event *event)
{
    bool bRet = false;
    CCPoint pt = touch->getLocation();
    CCRect  rc = m_sprite->boundingBox();
    if (rc.containsPoint(pt)) {
	bRet = true;
	m_bIsTouch = true;
	UpdateGameObjPos(pt.x, pt.y);
    }

#if defined(NDK_DEBUG) || defined(AK_DEBUG)
    char strBuf[50];
    snprintf(strBuf, 50, "<onTouchBegan> %d (%g, %g)\n", bRet, pt.x, pt.y);
    LOGAK(strBuf);
#endif
    return true;
}

void ScenePositioning::onTouchMoved(cocos2d::Touch *touch, cocos2d::Event *event)
{
    if (m_bIsTouch)
	UpdateGameObjPos(touch->getLocation().x, touch->getLocation().y);
}

void ScenePositioning::onTouchEnded(cocos2d::Touch *touch, cocos2d::Event *event)
{
    m_bIsTouch = false;
#if defined(NDK_DEBUG) || defined(AK_DEBUG)
    char strBuf[50];
    snprintf(strBuf, 50, "<onTouchEnded>  (%g, %g)\n",  touch->getLocation().x, touch->getLocation().y);
    LOGAK(strBuf);
#endif
}

void ScenePositioning::onTouchCancelled(cocos2d::Touch *touch, cocos2d::Event *event)
{}

void ScenePositioning::onKeyPressed(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* unused_event)
{
#ifdef AK_ANDROID
#define INCREASE_DECREASE  1
#else
#define INCREASE_DECREASE  5
#endif
    int x = m_LastX;
    int y = m_LastY;
    m_key = keyCode;

    switch (keyCode) {
    case EventKeyboard::KeyCode::KEY_LEFT_ARROW:
	x -= INCREASE_DECREASE;
	if (x < 0)  x = 0;
	m_bPressed = true;
	break;
    case EventKeyboard::KeyCode::KEY_RIGHT_ARROW:
	x += INCREASE_DECREASE;
//	if (x > m_pParentMenu->GetWidth())  x = m_pParentMenu->GetWidth();
	m_bPressed = true;
	break;
    case EventKeyboard::KeyCode::KEY_UP_ARROW:
	y += INCREASE_DECREASE;
//	if (y > m_pParentMenu->GetHeight())  y = m_pParentMenu->GetHeight();
	m_bPressed = true;
	break;
    case EventKeyboard::KeyCode::KEY_DOWN_ARROW:
	y -= INCREASE_DECREASE;
	if (y < 0)  y = 0;
	m_bPressed = true;
	break;
 //   case EventKeyboard::KeyCode::KEY_ESCAPE:
	//m_bPressed = true;
	//menuCloseCallback(NULL);
	//return;

    default:
	SceneBase::onKeyPressed(keyCode, unused_event);
	return;
    }
    UpdateGameObjPos(x, y);
}

void ScenePositioning::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* unused_event)
{
    m_bPressed = false;
    m_key = EventKeyboard::KeyCode::KEY_NONE;

    UpdateGameObjPos(m_LastX, m_LastY);
}

void ScenePositioning::UpdateGameObjPos(float x, float y)
{
    char strBuf[50];
    snprintf(strBuf, 50, "X: %.2f\nZ: %.2f", m_fGameObjectX, m_fGameObjectZ);
#if defined(NDK_DEBUG) || defined(AK_DEBUG)
    LOGAK(strBuf);
#endif
    m_labelPos->setString(strBuf);

    if (m_sprite) m_sprite->setPosition(ccp(x, y));

    // Set 3D position
    AkVector position;
    m_fGameObjectX = position.X = ((x / m_fWidth) - 0.5f) * 200.0f;
    m_fGameObjectZ = position.Z = -((y / m_fHeight) - 0.5f) * 200.0f;
    position.Y = 0;
                         
    AkVector orientationFront;
    orientationFront.Z = 1;
    orientationFront.Y = orientationFront.X = 0;
    AkVector orientationTop;
    orientationTop.X = orientationTop.Z = 0;
    orientationTop.Y = 1; 

    AkSoundPosition soundPos;
    soundPos.Set(position, orientationFront, orientationTop);
    AK::SoundEngine::SetPosition(GAME_OBJECT_POSTEST, soundPos);

    m_LastX = x;
    m_LastY = y;

}
